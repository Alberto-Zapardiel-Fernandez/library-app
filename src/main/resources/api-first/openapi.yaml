openapi: 3.0.0
info:
  title: Library API
  version: 1.0.0
tags:
  - name: Book
    description: Operations related to books.
  - name: User
    description: Operations related to users.
  - name: Reservation
    description: Operations related with reservations.
servers:
  - url: "/"
paths:
  "/update_reservation":
    put:
      operationId: updateReservation
      summary: Update a reservation by id.
      tags:
        - Reservation
      requestBody:
        $ref: '#/components/requestBodies/ReservationRequest'
      responses:
        '201':
          $ref: '#/components/responses/ReservationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  "/create_reservation":
    post:
      operationId: createReservation
      summary: Create a new reservation.
      tags:
        - Reservation
      requestBody:
        $ref: '#/components/requestBodies/ReservationRequest'
      responses:
        '201':
          $ref: '#/components/responses/ReservationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  "/delete_user/{id}":
    delete:
      operationId: deleteUser
      summary: Delete a user by id.
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: No content.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  "/update_user":
    put:
      operationId: updateUser
      summary: Update a user by id.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The updated user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  "/search_users":
    post:
      operationId: getUsers
      summary: Get a list of users.
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      requestBody:
        $ref: '#/components/requestBodies/UserSearch'
      responses:
        '200':
          $ref: '#/components/responses/PagedUserListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  "/create_user":
    post:
      operationId: createUser
      summary: Create a new user.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The created user.
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  "/search_books":
    post:
      operationId: getBooks
      summary: Get a list of books.
      tags:
        - Book
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      requestBody:
        $ref: '#/components/requestBodies/BookSearch'
      responses:
        '200':
          $ref: '#/components/responses/PagedBookListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  "/search_book/{id}":
    get:
      operationId: getBook
      summary: Get a book by id.
      tags:
        - Book
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '200':
          description: The book data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  "/search_book":
    get:
      operationId: getBookByIsbn
      summary: Get a book by isbn.
      tags:
        - Book
      parameters:
        - $ref: '#/components/parameters/Book-isbn'
      responses:
        '200':
          description: The book data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  "/create_book":
    post:
      operationId: createBook
      summary: Create a new book.
      tags:
        - Book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: The created book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  "/update_book":
    put:
      operationId: updateBook
      summary: Update a book by id.
      tags:
        - Book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: The updated book data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  "/delete_book/{id}":
    delete:
      operationId: deleteBook
      summary: Delete a book by id.
      tags:
        - Book
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '204':
          description: No content.
components:
  requestBodies:
    ReservationRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reservation'
    BookSearch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookSearchFilter'
    UserSearch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserSearchFilter'
  schemas:
    ReservationStatus:
      type: string
      enum:
        - PENDING
        - ACTIVE
        - COMPLETED
        - CANCELLED
      description: The status of the reservation.
    Reservation:
      type: object
      properties:
        id:
          type: integer
        bookId:
          type: integer
        userId:
          type: integer
        reservationDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/ReservationStatus'
        user:
          $ref: '#/components/schemas/User'
        book:
          $ref: '#/components/schemas/Book'
    UserSearchFilter:
      $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          pattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
        password:
          type: string
        role:
          type: integer
          default: 0
    BookSearchFilter:
      $ref: '#/components/schemas/Book'
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        available:
          type: boolean
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    Links:
      type: object
      properties:
        self:
          type: string
        next:
          type: string
        prev:
          type: string
        last:
          type: string
        count:
          type: integer
    PagedBookList:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        links:
          $ref: '#/components/schemas/Links'
    PagedUserList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        links:
          $ref: '#/components/schemas/Links'
  parameters:
    Offset:
      name: offset
      in: query
      description: Number of items to skip.
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    Limit:
      name: limit
      in: query
      description: Number of items to return.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    UserId:
      name: id
      in: path
      description: The id of the user.
      required: true
      schema:
        type: integer
      example: 1
    BookId:
      name: id
      in: path
      description: The id of the book.
      required: true
      schema:
        type: integer
      example: 1
    Book-isbn:
      name: isbn
      in: query
      description: The id of the book.
      required: true
      schema:
        type: string
        pattern: '^\d{3}-\d{2}-\d{3}-\d{3}-\d{1}$'
      example: 978-85-99-14-901-9
  responses:
    ReservationResponse:
      description: The created reservation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reservation'
    UserResponse:
      description: The created user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    BadRequest:
      description: Bad request response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    PagedBookListResponse:
      description: List of books with pagination links.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagedBookList'
    PagedUserListResponse:
      description: List of books with pagination links.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagedUserList'